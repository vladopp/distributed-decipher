#include "dbmanager.h"
#include <QSqlTableModel>
#include <QSqlQuery>
#include <ctime>

// TODO should remove magic strings as column names

DBManager::DBManager()
{

}

bool DBManager::initDbConnection()
{
    db = QSqlDatabase::addDatabase("QPSQL");
    db.setHostName("localhost");
    db.setDatabaseName("deciphy");
    db.setUserName("postgres");
    db.setPassword("1234");

    return db.open();
}

Task DBManager::getUnprocessedTask()
{
    QSqlTableModel model;
    model.setTable("public.tasks");
    model.setFilter("best_ key is null"); //TODO and accepted_timestamp < now() - 5minutes
    //model.setSort(1, Qt::AscendingOrder); TODO is it needed?

    // execute in a transaction to ensure that no other worker
    // can take the same task in the meantime
    // take a lock instead of transaction so that the above is true
    db.transaction();
    model.select();

    // get first record
    QSqlRecord record = model.record(0);
    // TODO check if empty return null
    record.setValue("accepted_timestamp", std::time(0));
    model.setRecord(0, record);
    model.submitAll();
    db.commit();

    Task task(record.value("id").toInt(),
              record.value("text_id").toInt(),
              record.value("from_key").toString().toStdString(),
              record.value("to_key").toString().toStdString());
    return task;
}

std::string DBManager::getTextById(int id)
{
    QSqlTableModel model;
    model.setTable("public.texts");
    model.setFilter(QString("id = %1").arg(id));

    model.select();
    QSqlRecord record = model.record(0);

    return record.value("encrypted_text").toString().toStdString();
}

void DBManager::persistTaskResult(const Task& task)
{
    QSqlTableModel model;
    model.setTable("public.tasks");

    // remove the id column from the model
    // because it is autogenerated
    // model.removeColumn(0);

    QSqlRecord record = model.record(task.getId());
    //record.
//    record.setValue(0, QString::fromStdString(key));
//    record.setValue(1, confidence);
//    record.setValue(2, QString::fromStdString(result));
//    record.setValue(3, text_id);

    // the negative value indicates that this record is going to be added at the end
    //return model.insertRecord(-1, record);
}

    void DBManager::addNewTask(const Task& task)
{
    QSqlTableModel model;
    model.setTable("public.tasks");

    QSqlRecord record = model.record();
}

void DBManager::closeDbConnection()
{
    db.close();
}
