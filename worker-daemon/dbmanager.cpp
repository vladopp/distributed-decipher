#include "dbmanager.h"
#include <QSqlTableModel>
#include <QSqlQuery>

DBManager::DBManager()
{

}

bool DBManager::initDbConnection()
{
    db = QSqlDatabase::addDatabase("QPSQL");
    db.setHostName("localhost");
    db.setDatabaseName("deciphy");
    db.setUserName("postgres");
    db.setPassword("1234");

    return db.open();
}

QSqlRecord DBManager::getFirstUnprocessedTask()
{
    QSqlQuery query(db);
    QString s = "SELECT public.tasks.'id',public.tasks.'from_key',public.tasks.'to_key',public.tasks.'text_id',"
                               "relTblAl_3.encr_text,public.tasks.'processed' FROM public.tasks,public.texts relTblAl_3 "
                               "WHERE (public.tasks.'text_id'=relTblAl_3.id) AND (processed = true) ORDER BY public.tasks.'from_key' ASC";
    query.prepare(s);
    query.exec();

    QSqlTableModel model;
    model.setTable("public.tasks");
    model.setFilter("processed = false");
    model.setSort(1, Qt::AscendingOrder);

    // execute in a transaction to ensure that no other worker
    // can take the same task in the meantime
    db.transaction();
    model.select();

    // get first record
    QSqlRecord record = model.record(0);
    record.setValue("processed", "true");
    model.setRecord(0, record);
    model.submitAll();
    db.commit();

    return record;
}

QString DBManager::getTextById(int id)
{
    QSqlTableModel model;
    model.setTable("public.texts");
    model.setFilter(QString("id = %1").arg(id));

    model.select();
    QSqlRecord record = model.record(0);

    return record.value("encr_text").toString();
}

bool DBManager::persistTaskResult(QString key, double confidence, QString result, int text_id)
{
    QSqlTableModel model;
    model.setTable("public.solutions");

    // remove the id column from the model
    // because it is autogenerated
    model.removeColumn(0);

    QSqlRecord record = model.record();
    record.setValue(0, key);
    record.setValue(1, confidence);
    record.setValue(2, result);
    record.setValue(3, text_id);

    // the negative value indicates that this record is going to be added at the end
    return model.insertRecord(-1, record);
}

void DBManager::closeDbConnection()
{
    db.close();
}
